{"ast":null,"code":"var _jsxFileName = \"D:\\\\lessens\\\\js\\\\react\\\\2\\\\React_repos\\\\pagin\\\\src\\\\components\\\\SVGMap\\\\SVGMap.tsx\";\nimport React from 'react';\nimport { ReactSVG } from 'react-svg';\nimport { SvgContainer, Modal, CloseButton } from './SVGMap.styled';\nimport Map from './ukraine.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SvgMap = ({\n  isOpen,\n  onClose,\n  regions\n}) => {\n  if (!isOpen) return null;\n\n  // Функция для получения первой части строки до первого '-'\n  function processString(input) {\n    const lowerCaseString = input.toLowerCase();\n    const parts = lowerCaseString.split('-');\n    return parts[0]; // Возвращаем первую часть\n  }\n\n  // Функция для поиска элементов по частичному совпадению id\n  function findElementsByPartialId(svg, partialId) {\n    const elements = svg.querySelectorAll('[id]');\n    const matchingElements = [];\n    elements.forEach(element => {\n      if (element.id.includes(partialId)) {\n        matchingElements.push(element);\n      }\n    });\n    return matchingElements;\n  }\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n      onClick: onClose,\n      children: \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SvgContainer, {\n      children: /*#__PURE__*/_jsxDEV(ReactSVG, {\n        src: Map,\n        beforeInjection: svg => {\n          console.log('Regions in SvgMap:', regions);\n          console.log('SVG загружен', svg);\n\n          // Обработка регионов\n          regions.forEach(region => {\n            // Применяем функцию processString к id региона\n            const parts_reg = processString(region.id);\n            console.log({\n              parts_reg\n            });\n\n            // Поиск всех элементов с id, содержащим parts_reg\n            const elements = findElementsByPartialId(svg, parts_reg);\n            elements.forEach(element => {\n              // Устанавливаем цвет для каждого подходящего элемента\n              element.setAttribute('style', `fill: ${region.color};`);\n            });\n          });\n        },\n        onError: error => {\n          console.error('Ошибка при загрузке SVG:', error);\n        },\n        style: {\n          width: '100%',\n          height: 'auto'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_c = SvgMap;\nexport default SvgMap;\nvar _c;\n$RefreshReg$(_c, \"SvgMap\");","map":{"version":3,"names":["React","ReactSVG","SvgContainer","Modal","CloseButton","Map","jsxDEV","_jsxDEV","SvgMap","isOpen","onClose","regions","processString","input","lowerCaseString","toLowerCase","parts","split","findElementsByPartialId","svg","partialId","elements","querySelectorAll","matchingElements","forEach","element","id","includes","push","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","beforeInjection","console","log","region","parts_reg","setAttribute","color","onError","error","style","width","height","_c","$RefreshReg$"],"sources":["D:/lessens/js/react/2/React_repos/pagin/src/components/SVGMap/SVGMap.tsx"],"sourcesContent":["import React from 'react';\nimport { ReactSVG } from 'react-svg';\nimport { SvgContainer, Modal, CloseButton } from './SVGMap.styled';\nimport Map from './ukraine.svg';\n\ninterface Region {\n  id: string;\n  color: string;\n}\n\ninterface SvgMapProps {\n  isOpen: boolean;\n  onClose: () => void;\n  regions: Region[];\n}\n\nconst SvgMap: React.FC<SvgMapProps> = ({ isOpen, onClose, regions }) => {\n  if (!isOpen) return null;\n\n  // Функция для получения первой части строки до первого '-'\n  function processString(input: string): string {\n    const lowerCaseString = input.toLowerCase(); \n    const parts = lowerCaseString.split('-');   \n    return parts[0]; // Возвращаем первую часть\n  }\n\n  // Функция для поиска элементов по частичному совпадению id\n  function findElementsByPartialId(svg: SVGSVGElement, partialId: string): SVGElement[] {\n    const elements = svg.querySelectorAll('[id]');\n    const matchingElements: SVGElement[] = [];\n    elements.forEach((element) => {\n      if (element.id.includes(partialId)) {\n        matchingElements.push(element as SVGElement);\n      }\n    });\n    return matchingElements;\n  }\n\n  return (\n    <Modal>\n      <CloseButton onClick={onClose}>Закрыть</CloseButton>\n      <SvgContainer>\n        <ReactSVG\n          src={Map}\n          beforeInjection={(svg) => {\n            console.log('Regions in SvgMap:', regions);\n            console.log('SVG загружен', svg);\n\n            // Обработка регионов\n            regions.forEach((region) => {\n              // Применяем функцию processString к id региона\n              const parts_reg = processString(region.id);\n              console.log({ parts_reg });\n\n              // Поиск всех элементов с id, содержащим parts_reg\n              const elements = findElementsByPartialId(svg, parts_reg);\n              elements.forEach((element) => {\n                // Устанавливаем цвет для каждого подходящего элемента\n                element.setAttribute('style', `fill: ${region.color};`);\n              });\n            });\n          }}\n          onError={(error) => {\n            console.error('Ошибка при загрузке SVG:', error);\n          }}\n          style={{ width: '100%', height: 'auto' }} \n        />\n      </SvgContainer>\n    </Modal>\n  );\n};\n\nexport default SvgMap;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,YAAY,EAAEC,KAAK,EAAEC,WAAW,QAAQ,iBAAiB;AAClE,OAAOC,GAAG,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAahC,MAAMC,MAA6B,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAQ,CAAC,KAAK;EACtE,IAAI,CAACF,MAAM,EAAE,OAAO,IAAI;;EAExB;EACA,SAASG,aAAaA,CAACC,KAAa,EAAU;IAC5C,MAAMC,eAAe,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC;IAC3C,MAAMC,KAAK,GAAGF,eAAe,CAACG,KAAK,CAAC,GAAG,CAAC;IACxC,OAAOD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB;;EAEA;EACA,SAASE,uBAAuBA,CAACC,GAAkB,EAAEC,SAAiB,EAAgB;IACpF,MAAMC,QAAQ,GAAGF,GAAG,CAACG,gBAAgB,CAAC,MAAM,CAAC;IAC7C,MAAMC,gBAA8B,GAAG,EAAE;IACzCF,QAAQ,CAACG,OAAO,CAAEC,OAAO,IAAK;MAC5B,IAAIA,OAAO,CAACC,EAAE,CAACC,QAAQ,CAACP,SAAS,CAAC,EAAE;QAClCG,gBAAgB,CAACK,IAAI,CAACH,OAAqB,CAAC;MAC9C;IACF,CAAC,CAAC;IACF,OAAOF,gBAAgB;EACzB;EAEA,oBACEhB,OAAA,CAACJ,KAAK;IAAA0B,QAAA,gBACJtB,OAAA,CAACH,WAAW;MAAC0B,OAAO,EAAEpB,OAAQ;MAAAmB,QAAA,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,eACpD3B,OAAA,CAACL,YAAY;MAAA2B,QAAA,eACXtB,OAAA,CAACN,QAAQ;QACPkC,GAAG,EAAE9B,GAAI;QACT+B,eAAe,EAAGjB,GAAG,IAAK;UACxBkB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE3B,OAAO,CAAC;UAC1C0B,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEnB,GAAG,CAAC;;UAEhC;UACAR,OAAO,CAACa,OAAO,CAAEe,MAAM,IAAK;YAC1B;YACA,MAAMC,SAAS,GAAG5B,aAAa,CAAC2B,MAAM,CAACb,EAAE,CAAC;YAC1CW,OAAO,CAACC,GAAG,CAAC;cAAEE;YAAU,CAAC,CAAC;;YAE1B;YACA,MAAMnB,QAAQ,GAAGH,uBAAuB,CAACC,GAAG,EAAEqB,SAAS,CAAC;YACxDnB,QAAQ,CAACG,OAAO,CAAEC,OAAO,IAAK;cAC5B;cACAA,OAAO,CAACgB,YAAY,CAAC,OAAO,EAAE,SAASF,MAAM,CAACG,KAAK,GAAG,CAAC;YACzD,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ,CAAE;QACFC,OAAO,EAAGC,KAAK,IAAK;UAClBP,OAAO,CAACO,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAClD,CAAE;QACFC,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACU,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEZ,CAAC;AAACc,EAAA,GAtDIxC,MAA6B;AAwDnC,eAAeA,MAAM;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}