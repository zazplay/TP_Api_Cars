import React from 'react';
import { Pagination } from 'react-bootstrap';

var PaginationControl = function PaginationControl(_ref) {
  var _ref$page = _ref.page,
      page = _ref$page === void 0 ? 1 : _ref$page,
      _ref$between = _ref.between,
      between = _ref$between === void 0 ? 3 : _ref$between,
      total = _ref.total,
      limit = _ref.limit,
      _ref$changePage = _ref.changePage,
      changePage = _ref$changePage === void 0 ? function (page) {
    return console.log(page);
  } : _ref$changePage,
      _ref$next = _ref.next,
      next = _ref$next === void 0 ? true : _ref$next,
      _ref$last = _ref.last,
      last = _ref$last === void 0 ? false : _ref$last,
      _ref$ellipsis = _ref.ellipsis,
      ellipsis = _ref$ellipsis === void 0 ? 0 : _ref$ellipsis;
  var total_pages = Math.ceil(total / limit);
  between = between < 1 ? 1 : between;
  page = page < 1 ? 1 : page > total_pages ? total_pages : page;
  ellipsis = ellipsis < 1 ? 0 : ellipsis + 2 >= between ? between - 2 : ellipsis;
  var positions = Array.from({
    length: total_pages
  }, function (v, i) {
    return i;
  });
  var qtd_pages = between * 2 + 1;
  var range = total_pages <= qtd_pages // Show active without slice
  ? positions : page - 1 <= between // Show active in left
  ? positions.slice(0, qtd_pages - (ellipsis > 0 ? ellipsis + 1 : 0)) : page + between >= total_pages // Show active in right
  ? positions.slice(total_pages - qtd_pages + (ellipsis > 0 ? ellipsis + 1 : 0), total_pages) // Show active in middle
  : positions.slice(page - 1 - (between - (ellipsis > 0 ? ellipsis + 1 : 0)), page + (between - (ellipsis > 0 ? ellipsis + 1 : 0)));
  return total !== null && total > 0 ? React.createElement(Pagination, {
    className: "justify-content-md-center"
  }, last && React.createElement(Pagination.First, {
    onClick: function onClick() {
      return page > 1 ? changePage(1) : {};
    },
    disabled: page <= 1
  }), next && React.createElement(Pagination.Prev, {
    onClick: function onClick() {
      return page > 1 ? changePage(page - 1) : {};
    },
    disabled: page <= 1
  }), total_pages > between * 2 + 1 && ellipsis > 0 && positions.slice(0, page - 1 <= between ? 0 : ellipsis).map(function (value) {
    return React.createElement(Pagination.Item, {
      key: value,
      onClick: function onClick() {
        return value !== page - 1 ? changePage(value + 1) : {};
      }
    }, value + 1);
  }), // Show ellipsis when "page" is bigger than "between"
  total_pages > between * 2 + 1 && ellipsis > 0 && page - 1 > between && React.createElement(Pagination.Ellipsis, {
    disabled: true
  }), range.map(function (value) {
    return React.createElement(Pagination.Item, {
      active: value === page - 1,
      key: value,
      onClick: function onClick() {
        return value !== page - 1 ? changePage(value + 1) : {};
      }
    }, value + 1);
  }), // Show ellipsis when "page" is lower than "between"
  total_pages > between * 2 + 1 && ellipsis > 0 && page < total_pages - between && React.createElement(Pagination.Ellipsis, {
    disabled: true
  }), total_pages > between * 2 + 1 && ellipsis > 0 && positions.slice(page >= total_pages - between ? total_pages : total_pages - ellipsis, total_pages).map(function (value) {
    return React.createElement(Pagination.Item, {
      key: value,
      onClick: function onClick() {
        return value !== page - 1 ? changePage(value + 1) : {};
      }
    }, value + 1);
  }), next && React.createElement(Pagination.Next, {
    onClick: function onClick() {
      return page < total_pages ? changePage(page + 1) : {};
    },
    disabled: page >= total_pages
  }), last && React.createElement(Pagination.Last, {
    onClick: function onClick() {
      return page < total_pages ? changePage(total_pages) : {};
    },
    disabled: page >= total_pages
  })) : React.createElement(React.Fragment, null);
};

export { PaginationControl };
//# sourceMappingURL=react-bootstrap-pagination-control.esm.js.map
